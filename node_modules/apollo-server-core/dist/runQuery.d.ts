import { GraphQLSchema, GraphQLFieldResolver, DocumentNode, GraphQLError, ValidationContext } from 'graphql';
import { Request } from 'apollo-server-env';
import { GraphQLExtension } from 'graphql-extensions';
import { CacheControlExtensionOptions } from 'apollo-cache-control';
export interface GraphQLResponse {
    data?: object;
    errors?: Array<GraphQLError & object>;
    extensions?: object;
}
export interface QueryOptions {
    schema: GraphQLSchema;
    queryString?: string;
    parsedQuery?: DocumentNode;
    nonQueryError?: Error;
    rootValue?: any;
    context?: any;
    variables?: {
        [key: string]: any;
    };
    operationName?: string;
    validationRules?: Array<(context: ValidationContext) => any>;
    fieldResolver?: GraphQLFieldResolver<any, any>;
    formatError?: Function;
    formatResponse?: Function;
    debug?: boolean;
    tracing?: boolean;
    cacheControl?: boolean | CacheControlExtensionOptions;
    request: Pick<Request, 'url' | 'method' | 'headers'>;
    extensions?: Array<() => GraphQLExtension>;
    persistedQueryHit?: boolean;
    persistedQueryRegister?: boolean;
}
export declare function runQuery(options: QueryOptions): Promise<GraphQLResponse>;
//# sourceMappingURL=runQuery.d.ts.map