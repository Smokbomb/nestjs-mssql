{"version":3,"sources":["../../src/metadata/MetadataStorage.ts"],"names":[],"mappings":"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","file":"MetadataStorage.js","sourcesContent":["import {TypeMetadata} from \"./TypeMetadata\";\nimport {ExposeMetadata} from \"./ExposeMetadata\";\nimport {ExcludeMetadata} from \"./ExcludeMetadata\";\nimport {TransformationType} from \"../TransformOperationExecutor\";\nimport {TransformMetadata} from \"./TransformMetadata\";\n\n/**\n * Storage all library metadata.\n */\nexport class MetadataStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    private _typeMetadatas: TypeMetadata[] = [];\n    private _transformMetadatas: TransformMetadata[] = [];\n    private _exposeMetadatas: ExposeMetadata[] = [];\n    private _excludeMetadatas: ExcludeMetadata[] = [];\n\n    // -------------------------------------------------------------------------\n    // Adder Methods\n    // -------------------------------------------------------------------------\n\n    addTypeMetadata(metadata: TypeMetadata) {\n        this._typeMetadatas.push(metadata);\n    }\n\n    addTransformMetadata(metadata: TransformMetadata) {\n        this._transformMetadatas.push(metadata);\n    }\n\n    addExposeMetadata(metadata: ExposeMetadata) {\n        this._exposeMetadatas.push(metadata);\n    }\n\n    addExcludeMetadata(metadata: ExcludeMetadata) {\n        this._excludeMetadatas.push(metadata);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    findTransformMetadatas(target: Function, propertyName: string, transformationType: TransformationType): TransformMetadata[] {\n        return this.findMetadatas(this._transformMetadatas, target, propertyName)\n            .filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                    return true;\n\n                if (metadata.options.toClassOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_CLASS ||  transformationType === TransformationType.PLAIN_TO_CLASS;\n                }\n                if (metadata.options.toPlainOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_PLAIN;\n                }\n\n                return true;\n            });\n    }\n\n    findExcludeMetadata(target: Function, propertyName: string): ExcludeMetadata {\n        return this.findMetadata(this._excludeMetadatas, target, propertyName);\n    }\n\n    findExposeMetadata(target: Function, propertyName: string): ExposeMetadata {\n        return this.findMetadata(this._exposeMetadatas, target, propertyName);\n    }\n\n    findExposeMetadataByCustomName(target: Function, name: string): ExposeMetadata {\n        return this.getExposedMetadatas(target).find(metadata => {\n            return metadata.options && metadata.options.name === name;\n        });\n    }\n\n    findTypeMetadata(target: Function, propertyName: string) {\n        return this.findMetadata(this._typeMetadatas, target, propertyName);\n    }\n\n    getStrategy(target: Function): \"excludeAll\"|\"exposeAll\"|\"none\" {\n        const exclude = this._excludeMetadatas.find(metadata => metadata.target === target && metadata.propertyName === undefined);\n        const expose = this._exposeMetadatas.find(metadata => metadata.target === target && metadata.propertyName === undefined);\n        if ((exclude && expose) || (!exclude && !expose)) return \"none\";\n        return exclude ? \"excludeAll\" : \"exposeAll\";\n    }\n\n    getExposedMetadatas(target: Function): ExposeMetadata[] {\n        return this.getMetadata(this._exposeMetadatas, target);\n    }\n\n    getExcludedMetadatas(target: Function): ExcludeMetadata[] {\n        return this.getMetadata(this._excludeMetadatas, target);\n    }\n\n    getExposedProperties(target: Function, transformationType: TransformationType): string[] {\n        return this.getExposedMetadatas(target)\n            .filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                    return true;\n\n                if (metadata.options.toClassOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_CLASS ||  transformationType === TransformationType.PLAIN_TO_CLASS;\n                }\n                if (metadata.options.toPlainOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_PLAIN;\n                }\n\n                return true;\n            })\n            .map(metadata => metadata.propertyName);\n    }\n\n    getExcludedProperties(target: Function, transformationType: TransformationType): string[] {\n        return this.getExcludedMetadatas(target)\n            .filter(metadata => {\n                if (!metadata.options)\n                    return true;\n                if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true)\n                    return true;\n\n                if (metadata.options.toClassOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_CLASS ||  transformationType === TransformationType.PLAIN_TO_CLASS;\n                }\n                if (metadata.options.toPlainOnly === true) {\n                    return transformationType === TransformationType.CLASS_TO_PLAIN;\n                }\n\n                return true;\n            })\n            .map(metadata => metadata.propertyName);\n    }\n\n    clear() {\n        this._typeMetadatas = [];\n        this._exposeMetadatas = [];\n        this._excludeMetadatas = [];\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private getMetadata<T extends { target: Function, propertyName: string }>(metadatas: T[], target: Function): T[] {\n        const metadataFromTarget = metadatas.filter(meta => meta.target === target && meta.propertyName !== undefined);\n        const metadataFromChildren = metadatas.filter(meta => target && target.prototype instanceof meta.target && meta.propertyName !== undefined);\n        return metadataFromChildren.concat(metadataFromTarget);\n    }\n\n    private findMetadata<T extends { target: Function, propertyName: string }>(metadatas: T[], target: Function, propertyName: string): T {\n        const metadataFromTarget = metadatas.find(meta => meta.target === target && meta.propertyName === propertyName);\n        const metadataFromChildren = metadatas.find(meta => target && target.prototype instanceof meta.target && meta.propertyName === propertyName);\n        return metadataFromTarget || metadataFromChildren;\n    }\n\n    private findMetadatas<T extends { target: Function, propertyName: string }>(metadatas: T[], target: Function, propertyName: string): T[] {\n        const metadataFromTarget = metadatas.filter(meta => meta.target === target && meta.propertyName === propertyName);\n        const metadataFromChildren = metadatas.filter(meta => target && target.prototype instanceof meta.target && meta.propertyName === propertyName);\n        return metadataFromChildren.reverse().concat(metadataFromTarget.reverse());\n    }\n\n}\n"],"sourceRoot":".."}