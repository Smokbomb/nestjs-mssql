{"version":3,"sources":["../browser/src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"./EntityManager\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBluckWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    CursorResult,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCallback,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    MongoError, ObjectID,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {DocumentToEntityTransformer} from \"../query-builder/transformer/DocumentToEntityTransformer\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {QueryPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets query runner used to execute queries.\n     */\n    get queryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver).queryRunner!;\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        return cursor.toArray();\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ]);\n        return [results, parseInt(count)];\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    async findByIds<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n        query[\"_id\"] = { $in: ids.map(id => {\n            if (id instanceof objectIdInstance)\n                return id;\n\n            return id[metadata.objectIdColumn!.propertyName];\n        }) };\n\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.skip)\n                cursor.skip(optionsOrConditions.skip);\n            if (optionsOrConditions.take)\n                cursor.limit(optionsOrConditions.take);\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n        return await cursor.toArray();\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string,\n                          optionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|DeepPartial<Entity>,\n                          maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n        const id = (optionsOrConditions instanceof objectIdInstance) || typeof optionsOrConditions === \"string\" ?  optionsOrConditions : undefined;\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery((id ? maybeOptions : optionsOrConditions) as any) || {};\n        if (id) {\n            query[\"_id\"] = (id instanceof objectIdInstance) ? id : new objectIdInstance(id);\n        }\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\n            if (optionsOrConditions.order)\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray();\n        return result.length > 0 ? result[0] : undefined;\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, entity: QueryPartialEntity<Entity>|QueryPartialEntity<Entity>[], options?: SaveOptions): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult();\n        if (entity instanceof Array) {\n            result.raw = await this.insertMany(target, entity);\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key];\n                result.generatedMaps.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), insertedId)!);\n                result.identifiers.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), insertedId)!);\n            });\n\n        } else {\n            result.raw = await this.insertOne(target, entity);\n            result.generatedMaps.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), result.raw.insertedId)!);\n            result.identifiers.push(this.connection.driver.createGeneratedMap(this.connection.getMetadata(target), result.raw.insertedId)!);\n        }\n\n        return result;\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|DeepPartial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<UpdateResult> {\n        if (criteria instanceof Array) {\n            await Promise.all((criteria as any[]).map(criteriaItem => {\n                return this.update(target, criteriaItem, partialEntity);\n            }));\n\n        } else {\n            const metadata = this.connection.getMetadata(target);\n            await this.updateOne(target, this.convertMixedCriteria(metadata, criteria), { $set: partialEntity });\n        }\n\n        return new UpdateResult();\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|DeepPartial<Entity>, options?: RemoveOptions): Promise<DeleteResult> {\n        if (criteria instanceof Array) {\n            await Promise.all((criteria as any[]).map(criteriaItem => {\n                return this.delete(target, criteriaItem);\n            }));\n\n        } else {\n            await this.deleteOne(target, this.convertMixedCriteria(this.connection.getMetadata(target), criteria));\n        }\n\n        return new DeleteResult();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query?: ObjectLiteral): Cursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.cursor(metadata.tableName, query);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const cursor = this.createCursor(entityClassOrName, query);\n        this.applyEntityTransformationToCursor(metadata, cursor);\n        return cursor;\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.aggregate(metadata.tableName, pipeline, options);\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        const cursor = this.queryRunner.aggregate(metadata.tableName, pipeline, options);\n        this.applyEntityTransformationToCursor(metadata, cursor);\n        return cursor;\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.bulkWrite(metadata.tableName, operations, options);\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.count(metadata.tableName, query, options);\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.createCollectionIndex(metadata.tableName, fieldOrSpec, options);\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, indexSpecs: ObjectLiteral[]): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.createCollectionIndexes(metadata.tableName, indexSpecs);\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.deleteMany(metadata.tableName, query, options);\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.deleteOne(metadata.tableName, query, options);\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.distinct(metadata.tableName, key, query, options);\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, indexName: string, options?: CollectionOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.dropCollectionIndex(metadata.tableName, indexName, options);\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.dropCollectionIndexes(metadata.tableName);\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    geoHaystackSearch<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.geoHaystackSearch(metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    geoNear<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.geoNear(metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    group<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.collectionIndexes(metadata.tableName);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, indexes: string|string[]): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.collectionIndexExists(metadata.tableName, indexes);\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, options?: { full: boolean }): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.collectionIndexInformation(metadata.tableName, options);\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, options?: CollectionOptions): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.initializeOrderedBulkOp(metadata.tableName, options);\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, options?: CollectionOptions): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.initializeUnorderedBulkOp(metadata.tableName, options);\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.insertMany(metadata.tableName, docs, options);\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.insertOne(metadata.tableName, doc, options);\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.isCapped(metadata.tableName);\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.listCollectionIndexes(metadata.tableName, options);\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    mapReduce<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.mapReduce(metadata.tableName, map, reduce, options);\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    parallelCollectionScan<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.parallelCollectionScan(metadata.tableName, options);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    reIndex<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.reIndex(metadata.tableName);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.rename(metadata.tableName, newName, options);\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, options?: { scale: number }): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.stats(metadata.tableName, options);\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.updateMany(metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(entityClassOrName: ObjectType<Entity>|EntitySchema<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        return this.queryRunner.updateOne(metadata.tableName, query, update, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindManyOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where;\n\n        return optionsOrConditions;\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\n        if (!optionsOrConditions)\n            return undefined;\n\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where;\n\n        return optionsOrConditions;\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1;\n                    break;\n                case \"ASC\":\n                    orderCriteria[key] = 1;\n                    break;\n                default:\n                    orderCriteria[key] = order[key];\n            }\n            return orderCriteria;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(metadata: EntityMetadata, idMap: any): ObjectLiteral {\n        if (idMap instanceof Object) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap);\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue;\n                return query;\n            }, {} as any);\n        }\n\n        // means idMap is just object id\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID;\n        return {\n            \"_id\": (idMap instanceof objectIdInstance) ? idMap : new objectIdInstance(idMap)\n        };\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity>(metadata: EntityMetadata, cursor: Cursor<Entity>|AggregationCursor<Entity>) {\n        const ParentCursor = PlatformTools.load(\"mongodb\").Cursor;\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\n            if (callback) {\n                ParentCursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\n                    if (error) {\n                        callback(error, results);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    return callback(error, transformer.transformAll(results, metadata));\n                });\n            } else {\n                return ParentCursor.prototype.toArray.call(this).then((results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer();\n                    return transformer.transformAll(results, metadata);\n                });\n            }\n        };\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\n            if (callback) {\n                ParentCursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\n                    if (error || !result) {\n                        callback(error, result);\n                        return;\n                    }\n\n                    const transformer = new DocumentToEntityTransformer();\n                    return callback(error, transformer.transform(result, metadata));\n                });\n            } else {\n                return ParentCursor.prototype.next.call(this).then((result: Entity) => {\n                    if (!result) return result;\n                    const transformer = new DocumentToEntityTransformer();\n                    return transformer.transform(result, metadata);\n                });\n            }\n        };\n    }\n\n}"],"sourceRoot":".."}