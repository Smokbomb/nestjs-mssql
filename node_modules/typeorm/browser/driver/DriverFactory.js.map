{"version":3,"sources":["../browser/src/driver/DriverFactory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,kBAAkB,EAAC,MAAM,6BAA6B,CAAC;AAC/D,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAC,eAAe,EAAC,MAAM,6BAA6B,CAAC;AAC5D,OAAO,EAAC,YAAY,EAAC,MAAM,uBAAuB,CAAC;AACnD,OAAO,EAAC,YAAY,EAAC,MAAM,uBAAuB,CAAC;AACnD,OAAO,EAAC,aAAa,EAAC,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAC,iBAAiB,EAAC,MAAM,kCAAkC,CAAC;AACnE,OAAO,EAAC,WAAW,EAAC,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAC,WAAW,EAAC,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAC,cAAc,EAAC,MAAM,2BAA2B,CAAC;AAIzD;;GAEG;AACH;IAAA;IAiCA,CAAC;IA/BG;;OAEG;IACH,8BAAM,GAAN,UAAO,UAAsB;QACzB,IAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;QACrC,QAAQ,IAAI,EAAE;YACV,KAAK,OAAO;gBACR,OAAO,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,UAAU;gBACX,OAAO,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,KAAK,SAAS;gBACV,OAAO,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,SAAS;gBACV,OAAO,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC;YACzC,KAAK,cAAc;gBACf,OAAO,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACR,OAAO,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,OAAO;gBACR,OAAO,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,SAAS;gBACV,OAAO,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;YACvC;gBACI,MAAM,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;SAC1C;IACL,CAAC;IAEL,oBAAC;AAAD,CAjCA,AAiCC,IAAA","file":"DriverFactory.js","sourcesContent":["import {MissingDriverError} from \"../error/MissingDriverError\";\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"./oracle/OracleDriver\";\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\nimport {CordovaDriver} from \"./cordova/CordovaDriver\";\nimport {ReactNativeDriver} from \"./react-native/ReactNativeDriver\";\nimport {SqljsDriver} from \"./sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\nimport {Driver} from \"./Driver\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: Connection): Driver {\n        const type = connection.options.type;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    }\n\n}"],"sourceRoot":".."}